<?xml version="1.0" encoding="UTF-8"?>

<project name="athena-project-build" default="deploy">

  <!-- Load Tasks -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${wpilib.ant.dir}/ant-contrib.jar"/>
    </classpath>
  </taskdef>
  <taskdef resource="net/jtools/classloadertask/antlib.xml" classpath="${classloadertask.jar}"/>
  <classloader loader="system" classpath="${jsch.jar}"/>

  <target name="clean" description="Clean up all build and distribution artifacts.">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
  </target>

  <!-- Targets -->

  <target name="compile" description="Compile the source code.">
    <mkdir dir="${build.dir}"/>
    <echo>[athena-compile] Compiling ${src.dir} with classpath=${classpath} to ${build.dir}</echo>

    <javac srcdir="${src.dir}"
     destdir="${build.dir}"
     includeAntRuntime="no"
     includeJavaRuntime="no"
     classpath="${classpath}"
     target="${ant.java.version}"
     source="${ant.java.version}"
     compiler="javac${ant.java.version}"
     debug="true">
    </javac>
  </target>

  <target name="jar" depends="compile">
    <echo>[athena-jar] Making jar ${dist.jar}.</echo>
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${build.jars}" />

  <echo>[athena-jar] Copying jars from ${classpath} to ${build.jars}.</echo>
  <copy todir="${build.jars}" flatten="true">
    <path>
    <pathelement path="${classpath}"/>
    </path>
  </copy>

    <jar destfile="${dist.jar}" update="false">
      <manifest>
    	<attribute name="Main-Class" value="edu.wpi.first.wpilibj.RobotBase"/>
    	<attribute name="Robot-Class" value="${robot.class}"/>
    	<attribute name="Class-Path" value="."/>
      </manifest>

      <fileset dir="${build.dir}" includes="**/*.class"/>

    <zipgroupfileset dir="${build.jars}">
      <include name="**/*.jar" />
    </zipgroupfileset>
    </jar>
  </target>

  <!-- Simulate -->
  <target name="jar-for-simulation" depends="compile">
	<echo>[jar-for-simulation] Building jar.</echo>

	<jar destfile="${simulation.dist.jar}">
	  <manifest>
		<attribute name="Built-By" value="${user.name}"/>
		<attribute name="Robot-Class" value="${robot.class}"/>
		<attribute name="Main-Class" value="edu.wpi.first.wpilibj.RobotBase"/>
	  </manifest>
	  <fileset dir="${build.dir}" />
	  <zipgroupfileset dir="${wpilib.sim.lib}">
	  	<include name="**/*.jar" />
	  </zipgroupfileset>
	</jar>
  </target>

  <target name="simulate" depends="jar-for-simulation">
    <parallel>
      <sequential>
	    <echo>[simulate] Running Gazebo.</echo>
	    <exec executable="frcsim">
	      <arg value="${simulation.world.file}"/>
	    </exec>
      </sequential>
      <sequential>
        <sleep seconds="5"/>
	    <echo>[simulate] Running DriverStation.</echo>
	    <java jar="${wpilib.sim.tools}/SimDS.jar" fork="true">
          <jvmarg value="-Djava.library.path=${wpilib.sim.lib}" />
        </java>
      </sequential>
      <sequential>
        <sleep seconds="5"/>
	    <echo>[simulate] Running Code.</echo>
	    <java jar="${simulation.dist.jar}" fork="true">
          <jvmarg value="-Djava.library.path=${wpilib.sim.lib}" />
        </java>
      </sequential>
    </parallel>
  </target>

  <target name="debug-simulate" depends="jar-for-simulation">
    <parallel>
      <sequential>
	    <echo>[debug-simulate] Running Gazebo.</echo>
	    <exec executable="frcsim">
	      <arg value="${simulation.world.file}"/>
	    </exec>
      </sequential>
      <sequential>
        <sleep seconds="5"/>
	    <echo>[debug-simulate] Running DriverStation.</echo>
	    <java jar="${wpilib.sim.tools}/SimDS.jar" fork="true">
          <jvmarg value="-Djava.library.path=${wpilib.sim.lib}" />
        </java>
      </sequential>
      <sequential>
        <sleep seconds="5"/>
	    <echo>[debug-simulate] Running Code.</echo>
	    <java jar="${simulation.dist.jar}" fork="true">
          <jvmarg value="-Xdebug" />
          <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8348" />
          <jvmarg value="-Djava.library.path=${wpilib.sim.lib}" />
        </java>
      </sequential>
    </parallel>
  </target>
  
  <target name="dependencies" depends="get-target-ip">
    <property name="ant.enable.asserts" value="true"/>
	<post to="http://${target}/nisysapi/server" logfile="sysProps.xml" verbose="false" encoding="UTF-16LE" append="false">
		<prop name="Function" value="GetPropertiesOfItem"/>
		<prop name="Plugins" value="nisyscfg"/>
		<prop name="Items" value="system"/>
	</post>
	<loadfile srcFile="sysProps.xml" encoding="UTF-16LE" property="roboRIOSysValues"/>
	<propertyregex property="roboRIOImage" input="${roboRIOSysValues}" regexp="FRC_roboRIO_2015_v([0-9]+)" select="\1" defaultValue="ImageRegExFail"/>
	<assert message="roboRIO Image does not match plugin, allowed image version: ${roboRIOAllowedImages}">
		<bool>
			<contains string="${roboRIOAllowedImages}" substring="${roboRIOImage}"/>
		</bool>
	</assert>
	<echo>roboRIO image version validated</echo>
	<echo>Checking for JRE. If this fails install the JRE using these instructions: https://wpilib.screenstepslive.com/s/4485/m/13503/l/288822-installing-java-8-on-the-roborio-using-the-frc-roborio-java-installer-java-only</echo>
	<sshexec host="${target}"
        username="${username}"
        password="${password}"
        trust="true"
		failonerror="true"
        command="test -d ${roboRIOJRE.dir}"/>
  </target>
</project>